!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Bishop	Bishop.cpp	/^Bishop::Bishop(bool isWhite, int position_X, int position_Y)$/;"	f	class:Bishop
Board	Board.cpp	/^Board::Board(void)$/;"	f	class:Board
Button	Button.cpp	/^Button::Button()$/;"	f	class:Button
CC	makefile	/^CC = g++ -std=c++11$/;"	m
CFLAGS	makefile	/^CFLAGS = -I$(DIR_HEADERS) -ftest-coverage -fprofile-arcs$/;"	m
DIR_GCOV	makefile	/^DIR_GCOV = ..\/docs\/gcov$/;"	m
DIR_HEADERS	makefile	/^DIR_HEADERS = ..\/include$/;"	m
DIR_OBJECTS	makefile	/^DIR_OBJECTS = ..\/obj$/;"	m
DIR_SOURCES	makefile	/^DIR_SOURCES = ..\/src$/;"	m
DIR_TESTS	makefile	/^DIR_TESTS = ..\/tests$/;"	m
EatPiece	States.cpp	/^void States::EatPiece(int position_X, int position_Y)$/;"	f	class:States
GUIBoard	GUIBoard.cpp	/^GUIBoard::GUIBoard(){$/;"	f	class:GUIBoard
GameState	GameState.cpp	/^GameState::GameState(){$/;"	f	class:GameState
GetColor	Piece.cpp	/^bool Piece::GetColor()$/;"	f	class:Piece
GetIsAlive	Piece.cpp	/^bool Piece::GetIsAlive()$/;"	f	class:Piece
GetName	Piece.cpp	/^PieceName Piece::GetName()$/;"	f	class:Piece
GetPiece	States.cpp	/^Piece * States::GetPiece(int position_X, int position_Y)$/;"	f	class:States
GetPieceBestMove	States.cpp	/^PiecesValues States::GetPieceBestMove(Piece * piece)$/;"	f	class:States
GetPieceTurn	States.cpp	/^bool States::GetPieceTurn(void)$/;"	f	class:States
GetPositionX	Piece.cpp	/^int Piece::GetPositionX()$/;"	f	class:Piece
GetPositionY	Piece.cpp	/^int Piece::GetPositionY()$/;"	f	class:Piece
HEADERS	makefile	/^HEADERS = $(patsubst %,$(DIR_HEADERS)\/%,$(_HEADERS))$/;"	m
IsCheck	States.cpp	/^bool States::IsCheck(bool kingColor, int position_X, int position_Y)$/;"	f	class:States
IsCheckMate	States.cpp	/^bool States::IsCheckMate(bool kingColor)$/;"	f	class:States
IsInTheSpot	States.cpp	/^Obstacles States::IsInTheSpot(Piece * piece, int position_X, int position_Y)$/;"	f	class:States
IsInTheWay	States.cpp	/^Obstacles States::IsInTheWay(Piece * piece, int position_X, int position_Y)$/;"	f	class:States
IsMovementPossible	Bishop.cpp	/^bool Bishop::IsMovementPossible(int FinalPosition_X, int FinalPosition_Y)$/;"	f	class:Bishop
IsMovementPossible	King.cpp	/^bool King::IsMovementPossible(int FinalPosition_X, int FinalPosition_Y)$/;"	f	class:King
IsMovementPossible	Knight.cpp	/^bool Knight::IsMovementPossible(int FinalPosition_X, int FinalPosition_Y)$/;"	f	class:Knight
IsMovementPossible	Pawn.cpp	/^bool Pawn::IsMovementPossible(int FinalPosition_X, int FinalPosition_Y)$/;"	f	class:Pawn
IsMovementPossible	Piece.cpp	/^bool Piece::IsMovementPossible(int FinalPosition_X, int FinalPosition_Y)$/;"	f	class:Piece
IsMovementPossible	Queen.cpp	/^bool Queen::IsMovementPossible(int FinalPosition_X, int FinalPosition_Y)$/;"	f	class:Queen
IsMovementPossible	Rook.cpp	/^bool Rook::IsMovementPossible(int FinalPosition_X, int FinalPosition_Y)$/;"	f	class:Rook
IsPositionValid	States.cpp	/^bool States::IsPositionValid(Piece * piece, int position_X, int position_Y)$/;"	f	class:States
King	King.cpp	/^King::King(bool isWhite, int position_X, int position_Y)$/;"	f	class:King
Knight	Knight.cpp	/^Knight::Knight(bool isWhite, int position_X, int position_Y)$/;"	f	class:Knight
LIBS	makefile	/^LIBS = -lm -lSDL2 -lSDL2_image$/;"	m
LoadGame	States.cpp	/^void States::LoadGame(GameMode mode)$/;"	f	class:States
MovePiece	States.cpp	/^bool States::MovePiece(Piece * piece, int position_X, int position_Y)$/;"	f	class:States
OBJECTS	makefile	/^OBJECTS = $(patsubst %,$(DIR_OBJECTS)\/%,$(_OBJECTS))$/;"	m
PROJECT_EXE	makefile	/^PROJECT_EXE = ..\/Project$/;"	m
Pawn	Pawn.cpp	/^Pawn::Pawn(bool isWhite, int position_X, int position_Y)$/;"	f	class:Pawn
Piece	Piece.cpp	/^Piece::Piece()$/;"	f	class:Piece
PlayBestMove	States.cpp	/^void States::PlayBestMove(bool color, Level difficulty)$/;"	f	class:States
Queen	Queen.cpp	/^Queen::Queen(bool isWhite, int position_X, int position_Y)$/;"	f	class:Queen
Rook	Rook.cpp	/^Rook::Rook(bool isWhite, int position_X, int position_Y)$/;"	f	class:Rook
SDL_INCLUDES	main.cpp	19;"	d	file:
SaveGame	States.cpp	/^void States::SaveGame(GameMode mode)$/;"	f	class:States
SetDead	Piece.cpp	/^void Piece::SetDead()$/;"	f	class:Piece
SetDiagonalEnemy	Pawn.cpp	/^void Pawn::SetDiagonalEnemy(bool hasDiagonalEnemyLeft, bool hasDiagonalEnemyRight)$/;"	f	class:Pawn
SetDiagonalEnemy	Piece.cpp	/^void Piece::SetDiagonalEnemy(bool hasDiagonalEnemyRight, bool hasDiagonalEnemyLeft)$/;"	f	class:Piece
SetPawnDiagonalEnemies	States.cpp	/^void States::SetPawnDiagonalEnemies(bool check, Piece * piece, int futureEnemyX, int futureEnemyY)$/;"	f	class:States
SetPiece	States.cpp	/^bool States::SetPiece(Piece *piece, int position_X, int position_Y)$/;"	f	class:States
SetPieceTurn	States.cpp	/^void States::SetPieceTurn(bool pieceTurn)$/;"	f	class:States
SetPosition	Piece.cpp	/^void Piece::SetPosition(int position_X, int position_Y)$/;"	f	class:Piece
States	States.cpp	/^States::States(void)$/;"	f	class:States
TESTS	makefile	/^TESTS = $(patsubst %,$(DIR_TESTS)\/%,$(_TESTS))$/;"	m
TEST_EXE	makefile	/^TEST_EXE = ..\/Test$/;"	m
Texture	Texture.cpp	/^Texture::Texture()$/;"	f	class:Texture
TransformPawn	States.cpp	/^void States::TransformPawn(Piece * piece)$/;"	f	class:States
UpdateBestMoves	States.cpp	/^void States::UpdateBestMoves(void)$/;"	f	class:States
WhoWon	States.cpp	/^GameResult States::WhoWon(void)$/;"	f	class:States
_HEADERS	makefile	/^_HEADERS = Piece.hpp Board.hpp Pawn.hpp Knight.hpp Bishop.hpp Rook.hpp Queen.hpp King.hpp States.hpp Texture.hpp Button.hpp Graphics.hpp GameState.hpp GUIBoard.hpp$/;"	m
_OBJECTS	makefile	/^_OBJECTS = main.o Piece.o Board.o Pawn.o Knight.o Bishop.o Rook.o Queen.o King.o States.o Texture.o Button.o Graphics.o GameState.o GUIBoard.o$/;"	m
_TESTS	makefile	/^_TESTS = Test_Main.cpp$/;"	m
bestMove	main.cpp	/^Texture bestMove;$/;"	v
blackPieces	main.cpp	/^Texture blackPieces[7];$/;"	v
casaVerde	main.cpp	/^Texture casaVerde;$/;"	v
checkMovement	GUIBoard.cpp	/^bool GUIBoard::checkMovement(States* states){$/;"	f	class:GUIBoard
choosePieceTurn	GUIBoard.cpp	/^bool GUIBoard::choosePieceTurn(){$/;"	f	class:GUIBoard
close	Graphics.cpp	/^void Graphics::close() {$/;"	f	class:Graphics
destroy_board	Board.cpp	/^void Board::destroy_board()$/;"	f	class:Board
endGame	main.cpp	/^Texture endGame[3];$/;"	v
free	Texture.cpp	/^void Texture::free()$/;"	f	class:Texture
gBishop	main.cpp	/^Texture gBishop;$/;"	v
gBoard	main.cpp	/^Texture gBoard;$/;"	v
gButtonSpriteSheetTexture	main.cpp	/^Texture gButtonSpriteSheetTexture;$/;"	v
gButtons	main.cpp	/^Button gButtons[ Button::TOTAL_BUTTONS ];$/;"	v
gCheckTexture	main.cpp	/^Texture gCheckTexture;$/;"	v
gRenderer	main.cpp	/^SDL_Renderer* gRenderer = NULL;$/;"	v
gWindow	main.cpp	/^SDL_Window* gWindow = NULL;$/;"	v
getGameState	GameState.cpp	/^GameMode GameState::getGameState(){$/;"	f	class:GameState
getHeight	Texture.cpp	/^int Texture::getHeight()$/;"	f	class:Texture
getWidth	Texture.cpp	/^int Texture::getWidth()$/;"	f	class:Texture
handleEvent	Button.cpp	/^void Button::handleEvent( SDL_Event* e , GameState *gm)$/;"	f	class:Button
indexToPixel	GUIBoard.cpp	/^int GUIBoard::indexToPixel(int index){$/;"	f	class:GUIBoard
init	Graphics.cpp	/^bool Graphics::init(){$/;"	f	class:Graphics
insert_piece	Board.cpp	/^void Board::insert_piece(int x, int y, char c)$/;"	f	class:Board
loadFromFile	Texture.cpp	/^bool Texture::loadFromFile( std::string path )$/;"	f	class:Texture
loadMedia	Graphics.cpp	/^bool Graphics::loadMedia() {$/;"	f	class:Graphics
main	main.cpp	/^int main( int argc, char* args[] ){$/;"	f
pieceSelected	main.cpp	/^Texture pieceSelected;$/;"	v
render	Button.cpp	/^void Button::render()$/;"	f	class:Button
render	Texture.cpp	/^void Texture::render(int x, int y, SDL_Rect* clip, double angle, SDL_Point* center, SDL_RendererFlip flip )$/;"	f	class:Texture
renderAllPieces	GUIBoard.cpp	/^void GUIBoard::renderAllPieces(States* states){$/;"	f	class:GUIBoard
renderBestMove	GUIBoard.cpp	/^void GUIBoard::renderBestMove(States *states){$/;"	f	class:GUIBoard
renderCPU	GameState.cpp	/^void GameState::renderCPU(){$/;"	f	class:GameState
renderEditMode	GameState.cpp	/^void GameState::renderEditMode(){$/;"	f	class:GameState
renderMainMenu	GameState.cpp	/^void GameState::renderMainMenu(){$/;"	f	class:GameState
renderPVP	GameState.cpp	/^void GameState::renderPVP(){$/;"	f	class:GameState
renderPauseMenu	GameState.cpp	/^void GameState::renderPauseMenu(){$/;"	f	class:GameState
renderPieceOnBoard	GUIBoard.cpp	/^void GUIBoard::renderPieceOnBoard(PieceName piece, int cor, int ix, int iy){$/;"	f	class:GUIBoard
renderPossibleMoves	GUIBoard.cpp	/^void GUIBoard::renderPossibleMoves(States *states){$/;"	f	class:GUIBoard
return_piece	Board.cpp	/^char Board::return_piece(int x, int y)$/;"	f	class:Board
selection	main.cpp	/^Texture selection;$/;"	v
setCurrentSprite	Button.cpp	/^void Button::setCurrentSprite(ButtonSprite sprite){$/;"	f	class:Button
setGameState	GameState.cpp	/^void GameState::setGameState(GameMode gameMode){$/;"	f	class:GameState
setPosition	Button.cpp	/^void Button::setPosition( int x, int y )$/;"	f	class:Button
startStateMachine	GameState.cpp	/^void GameState::startStateMachine(GameMode gameMode){$/;"	f	class:GameState
updateFocus	GUIBoard.cpp	/^void GUIBoard::updateFocus(int x, int y){$/;"	f	class:GUIBoard
update_board	Board.cpp	/^void Board::update_board(States *states)$/;"	f	class:Board
whitePieces	main.cpp	/^Texture whitePieces[7];$/;"	v
~Bishop	Bishop.cpp	/^Bishop::~Bishop()$/;"	f	class:Bishop
~Board	Board.cpp	/^Board::~Board()$/;"	f	class:Board
~King	King.cpp	/^King::~King()$/;"	f	class:King
~Knight	Knight.cpp	/^Knight::~Knight()$/;"	f	class:Knight
~Pawn	Pawn.cpp	/^Pawn::~Pawn()$/;"	f	class:Pawn
~Piece	Piece.cpp	/^Piece::~Piece()$/;"	f	class:Piece
~Queen	Queen.cpp	/^Queen::~Queen()$/;"	f	class:Queen
~Rook	Rook.cpp	/^Rook::~Rook()$/;"	f	class:Rook
~Texture	Texture.cpp	/^Texture::~Texture()$/;"	f	class:Texture
