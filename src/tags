!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Bishop	Bishop.cpp	/^Bishop::Bishop(bool isWhite, int position_X, int position_Y)$/;"	f	class:Bishop
Board	Board.cpp	/^Board::Board(void)$/;"	f	class:Board
CC	makefile	/^CC = g++ -std=c++11$/;"	m
CFLAGS	makefile	/^CFLAGS = -I$(DIR_HEADERS) -ftest-coverage -fprofile-arcs$/;"	m
DIR_GCOV	makefile	/^DIR_GCOV = ..\/docs\/gcov$/;"	m
DIR_HEADERS	makefile	/^DIR_HEADERS = ..\/include$/;"	m
DIR_OBJECTS	makefile	/^DIR_OBJECTS = ..\/obj$/;"	m
DIR_SOURCES	makefile	/^DIR_SOURCES = ..\/src$/;"	m
DIR_TESTS	makefile	/^DIR_TESTS = ..\/tests$/;"	m
EatPiece	States.cpp	/^void States::EatPiece(int position_X, int position_Y)$/;"	f	class:States
GetColor	Piece.cpp	/^bool Piece::GetColor()$/;"	f	class:Piece
GetIsAlive	Piece.cpp	/^bool Piece::GetIsAlive()$/;"	f	class:Piece
GetName	Piece.cpp	/^PieceName Piece::GetName()$/;"	f	class:Piece
GetPositionX	Piece.cpp	/^int Piece::GetPositionX()$/;"	f	class:Piece
GetPositionY	Piece.cpp	/^int Piece::GetPositionY()$/;"	f	class:Piece
HEADERS	makefile	/^HEADERS = $(patsubst %,$(DIR_HEADERS)\/%,$(_HEADERS))$/;"	m
IsCheck	States.cpp	/^bool States::IsCheck(bool kingColor, int position_X, int position_Y)$/;"	f	class:States
IsInTheSpot	States.cpp	/^Obstacles States::IsInTheSpot(int position_X, int position_Y, Piece * piece)$/;"	f	class:States
IsInTheWay	States.cpp	/^Obstacles States::IsInTheWay(int position_X, int position_Y, Piece * piece)$/;"	f	class:States
IsMovementPossible	Bishop.cpp	/^bool Bishop::IsMovementPossible(int FinalPosition_X, int FinalPosition_Y)$/;"	f	class:Bishop
IsMovementPossible	King.cpp	/^bool King::IsMovementPossible(int FinalPosition_X, int FinalPosition_Y)$/;"	f	class:King
IsMovementPossible	Knight.cpp	/^bool Knight::IsMovementPossible(int FinalPosition_X, int FinalPosition_Y)$/;"	f	class:Knight
IsMovementPossible	Pawn.cpp	/^bool Pawn::IsMovementPossible(int FinalPosition_X, int FinalPosition_Y)$/;"	f	class:Pawn
IsMovementPossible	Piece.cpp	/^bool Piece::IsMovementPossible(int FinalPosition_X, int FinalPosition_Y)$/;"	f	class:Piece
IsMovementPossible	Queen.cpp	/^bool Queen::IsMovementPossible(int FinalPosition_X, int FinalPosition_Y)$/;"	f	class:Queen
IsMovementPossible	Rook.cpp	/^bool Rook::IsMovementPossible(int FinalPosition_X, int FinalPosition_Y)$/;"	f	class:Rook
King	King.cpp	/^King::King(bool isWhite, int position_X, int position_Y)$/;"	f	class:King
Knight	Knight.cpp	/^Knight::Knight(bool isWhite, int position_X, int position_Y)$/;"	f	class:Knight
LIBS	makefile	/^LIBS = -lm -lSDL2 -lSDL2_image -lSDL2_ttf$/;"	m
LTexture	18_key_states.cpp	/^LTexture::LTexture()$/;"	f	class:LTexture
LTexture	18_key_states.cpp	/^class LTexture$/;"	c	file:
LTexture	main.cpp	/^LTexture::LTexture()$/;"	f	class:LTexture
LTexture	main.cpp	/^class LTexture$/;"	c	file:
MovePiece	States.cpp	/^bool States::MovePiece(Piece * piece, int position_X, int position_Y)$/;"	f	class:States
OBJECTS	makefile	/^OBJECTS = $(patsubst %,$(DIR_OBJECTS)\/%,$(_OBJECTS))$/;"	m
PROJECT_EXE	makefile	/^PROJECT_EXE = ..\/Project$/;"	m
Pawn	Pawn.cpp	/^Pawn::Pawn(bool isWhite, int position_X, int position_Y)$/;"	f	class:Pawn
Piece	Piece.cpp	/^Piece::Piece()$/;"	f	class:Piece
Queen	Queen.cpp	/^Queen::Queen(bool isWhite, int position_X, int position_Y)$/;"	f	class:Queen
Rook	Rook.cpp	/^Rook::Rook(bool isWhite, int position_X, int position_Y)$/;"	f	class:Rook
SCREEN_HEIGHT	18_key_states.cpp	/^const int SCREEN_HEIGHT = 480;$/;"	v
SCREEN_HEIGHT	main.cpp	/^const int SCREEN_HEIGHT = 480;$/;"	v
SCREEN_WIDTH	18_key_states.cpp	/^const int SCREEN_WIDTH = 640;$/;"	v
SCREEN_WIDTH	main.cpp	/^const int SCREEN_WIDTH = 640;$/;"	v
SetDead	Piece.cpp	/^void Piece::SetDead()$/;"	f	class:Piece
SetDiagonalEnemy	Pawn.cpp	/^void Pawn::SetDiagonalEnemy(bool hasDiagonalEnemyLeft, bool hasDiagonalEnemyRight)$/;"	f	class:Pawn
SetDiagonalEnemy	Piece.cpp	/^void Piece::SetDiagonalEnemy(bool hasDiagonalEnemyRight, bool hasDiagonalEnemyLeft)$/;"	f	class:Piece
SetPawnDiagonalEnemies	States.cpp	/^void States::SetPawnDiagonalEnemies(bool check, Piece * piece)$/;"	f	class:States
SetPosition	Piece.cpp	/^void Piece::SetPosition(int position_X, int position_Y)$/;"	f	class:Piece
States	States.cpp	/^States::States(void)$/;"	f	class:States
TESTS	makefile	/^TESTS = $(patsubst %,$(DIR_TESTS)\/%,$(_TESTS))$/;"	m
TEST_EXE	makefile	/^TEST_EXE = ..\/Test$/;"	m
_HEADERS	makefile	/^_HEADERS = Piece.hpp Board.hpp Pawn.hpp Knight.hpp Bishop.hpp Rook.hpp Queen.hpp King.hpp States.hpp$/;"	m
_OBJECTS	makefile	/^_OBJECTS = main.o Piece.o Board.o Pawn.o Knight.o Bishop.o Rook.o Queen.o King.o States.o$/;"	m
_TESTS	makefile	/^_TESTS = Test_Main.cpp$/;"	m
close	18_key_states.cpp	/^void close()$/;"	f
close	main.cpp	/^void close()$/;"	f
destroyBoard	Board.cpp	/^void Board::destroyBoard()$/;"	f	class:Board
free	18_key_states.cpp	/^void LTexture::free()$/;"	f	class:LTexture
free	main.cpp	/^void LTexture::free()$/;"	f	class:LTexture
gBoard	main.cpp	/^LTexture gBoard;$/;"	v
gDownTexture	18_key_states.cpp	/^LTexture gDownTexture;$/;"	v
gLeftTexture	18_key_states.cpp	/^LTexture gLeftTexture;$/;"	v
gPressTexture	18_key_states.cpp	/^LTexture gPressTexture;$/;"	v
gRenderer	18_key_states.cpp	/^SDL_Renderer* gRenderer = NULL;$/;"	v
gRenderer	main.cpp	/^SDL_Renderer* gRenderer = NULL;$/;"	v
gRightTexture	18_key_states.cpp	/^LTexture gRightTexture;$/;"	v
gUpTexture	18_key_states.cpp	/^LTexture gUpTexture;$/;"	v
gWindow	18_key_states.cpp	/^SDL_Window* gWindow = NULL;$/;"	v
gWindow	main.cpp	/^SDL_Window* gWindow = NULL;$/;"	v
getHeight	18_key_states.cpp	/^int LTexture::getHeight()$/;"	f	class:LTexture
getHeight	main.cpp	/^int LTexture::getHeight()$/;"	f	class:LTexture
getWidth	18_key_states.cpp	/^int LTexture::getWidth()$/;"	f	class:LTexture
getWidth	main.cpp	/^int LTexture::getWidth()$/;"	f	class:LTexture
init	18_key_states.cpp	/^bool init()$/;"	f
init	main.cpp	/^bool init()$/;"	f
loadFromFile	18_key_states.cpp	/^bool LTexture::loadFromFile( std::string path )$/;"	f	class:LTexture
loadFromFile	main.cpp	/^bool LTexture::loadFromFile( std::string path )$/;"	f	class:LTexture
loadFromRenderedText	18_key_states.cpp	/^bool LTexture::loadFromRenderedText( std::string textureText, SDL_Color textColor )$/;"	f	class:LTexture
loadFromRenderedText	main.cpp	/^bool LTexture::loadFromRenderedText( std::string textureText, SDL_Color textColor )$/;"	f	class:LTexture
loadMedia	18_key_states.cpp	/^bool loadMedia()$/;"	f
loadMedia	main.cpp	/^bool loadMedia()$/;"	f
mHeight	18_key_states.cpp	/^		int mHeight;$/;"	m	class:LTexture	file:
mHeight	main.cpp	/^		int mHeight;$/;"	m	class:LTexture	file:
mTexture	18_key_states.cpp	/^		SDL_Texture* mTexture;$/;"	m	class:LTexture	file:
mTexture	main.cpp	/^		SDL_Texture* mTexture;$/;"	m	class:LTexture	file:
mWidth	18_key_states.cpp	/^		int mWidth;$/;"	m	class:LTexture	file:
mWidth	main.cpp	/^		int mWidth;$/;"	m	class:LTexture	file:
main	18_key_states.cpp	/^int main( int argc, char* args[] )$/;"	f
main	main.cpp	/^int main( int argc, char* args[] )$/;"	f
render	18_key_states.cpp	/^void LTexture::render( int x, int y, SDL_Rect* clip, double angle, SDL_Point* center, SDL_RendererFlip flip )$/;"	f	class:LTexture
render	main.cpp	/^void LTexture::render( int x, int y, SDL_Rect* clip, double angle, SDL_Point* center, SDL_RendererFlip flip )$/;"	f	class:LTexture
returnPiece	Board.cpp	/^char Board::returnPiece(int x, int y)$/;"	f	class:Board
setAlpha	18_key_states.cpp	/^void LTexture::setAlpha( Uint8 alpha )$/;"	f	class:LTexture
setAlpha	main.cpp	/^void LTexture::setAlpha( Uint8 alpha )$/;"	f	class:LTexture
setBlendMode	18_key_states.cpp	/^void LTexture::setBlendMode( SDL_BlendMode blending )$/;"	f	class:LTexture
setBlendMode	main.cpp	/^void LTexture::setBlendMode( SDL_BlendMode blending )$/;"	f	class:LTexture
setColor	18_key_states.cpp	/^void LTexture::setColor( Uint8 red, Uint8 green, Uint8 blue )$/;"	f	class:LTexture
setColor	main.cpp	/^void LTexture::setColor( Uint8 red, Uint8 green, Uint8 blue )$/;"	f	class:LTexture
~Bishop	Bishop.cpp	/^Bishop::~Bishop()$/;"	f	class:Bishop
~Board	Board.cpp	/^Board::~Board()$/;"	f	class:Board
~King	King.cpp	/^King::~King()$/;"	f	class:King
~Knight	Knight.cpp	/^Knight::~Knight()$/;"	f	class:Knight
~LTexture	18_key_states.cpp	/^LTexture::~LTexture()$/;"	f	class:LTexture
~LTexture	main.cpp	/^LTexture::~LTexture()$/;"	f	class:LTexture
~Pawn	Pawn.cpp	/^Pawn::~Pawn()$/;"	f	class:Pawn
~Piece	Piece.cpp	/^Piece::~Piece()$/;"	f	class:Piece
~Queen	Queen.cpp	/^Queen::~Queen()$/;"	f	class:Queen
~Rook	Rook.cpp	/^Rook::~Rook()$/;"	f	class:Rook
